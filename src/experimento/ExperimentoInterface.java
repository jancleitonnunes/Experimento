/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package experimento;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author PC
 */
public class ExperimentoInterface extends javax.swing.JFrame {

    /**
     * Creates new form ExperimentoInterface
     */
    public ExperimentoInterface() throws UnsupportedEncodingException {
        initComponents();
        URL caminhoImagem = this.getClass().getClassLoader().getResource("img/engrenagem.png");
        Image iconeTitulo = Toolkit.getDefaultToolkit().getImage(caminhoImagem);
        setIconImage(iconeTitulo);
        PrintStream printStream = new PrintStream(new CustomOutputStream(jTextArea1),true, "UTF-8");        
        System.setOut(printStream);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelTxCruzamento = new javax.swing.JLabel();
        labelTxMutacao = new javax.swing.JLabel();
        taxaCruzamento = new javax.swing.JLabel();
        taxaMutacao = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jProgressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Experimento AG");

        labelTxCruzamento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelTxCruzamento.setText("Taxa de cruzamento:");

        labelTxMutacao.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labelTxMutacao.setText("Taxa de mutação:");

        taxaCruzamento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        taxaCruzamento.setText("0");

        taxaMutacao.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        taxaMutacao.setText("0");

        jButton1.setText("Iniciar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jProgressBar.setBackground(new java.awt.Color(255, 255, 255));
        jProgressBar.setForeground(new java.awt.Color(0, 0, 0));
        jProgressBar.setMaximum(1000);
        jProgressBar.setStringPainted(true);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelTxCruzamento)
                                .addGap(18, 18, 18)
                                .addComponent(taxaCruzamento, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(labelTxMutacao)
                                .addGap(18, 18, 18)
                                .addComponent(taxaMutacao, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 362, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTxCruzamento)
                    .addComponent(taxaCruzamento)
                    .addComponent(labelTxMutacao)
                    .addComponent(taxaMutacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            jTextArea1.setText("");
            iniciar();
        } catch (IOException ex) {
            Logger.getLogger(ExperimentoInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void iniciar()throws FileNotFoundException, IOException{
        jButton1.setEnabled(false);
        /*jProgressBar.setStringPainted(true);
        jProgressBar.setString("0%");*/
        new Thread(new Runnable(){
            @Override
            public void run(){
                try {        
                    Instancia.lerInstancia();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(ExperimentoInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("\n\nINICIALIZANDO...");
                double t = System.currentTimeMillis();
                float distanciaCadaExecucao[] = new float[10];//DISTANCIA DE CADA EXECUÇÃO PARA CALCULAR O MÍNIMO, MÁXIMO E MÉDIA
                AG ag = new AG();
                int exec = 0;
                Cromossomo resultado;        
                float cruzamento, mutacao, distanciaMedia;
                int progresso = 0;
                for(cruzamento=51; cruzamento<=100; cruzamento++){
                    taxaCruzamento.setText((int)cruzamento+"%");

                    for(mutacao=0.5f; mutacao<=10; mutacao=mutacao+0.5f){
                        //ATUALIZA PROGRESSBAR
                        progresso++;
                        jProgressBar.setValue(progresso);
                        jProgressBar.setStringPainted(true);
                        jProgressBar.setString(progresso/10+"%");
                        
                        taxaMutacao.setText(mutacao+"%");                                              
                        exec++;
                        distanciaMedia = 0f;                               

                        for(int i=0; i<10; i++){
                            ag = new AG();
                            resultado = new Cromossomo();
                            System.out.println((i+1)+"a execucao");
                            double tempoExecucao = System.currentTimeMillis();
                            resultado = ag.executar(cruzamento, mutacao);

                            if (resultado.getDistancia() <= Instancia.getMelhorSolucaoConhecida()){
                                System.out.println("IGUAL OU ABAIXO DA MELHOR SOLUCAO CONHECIDA: "+resultado);
                                try {
                                    Instancia.escreveMelhorSolucaoConhecida(resultado, cruzamento, mutacao);
                                } catch (IOException ex) {
                                    Logger.getLogger(ExperimentoInterface.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }

                            tempoExecucao = System.currentTimeMillis() - tempoExecucao;
                            tempoExecucao = tempoExecucao/1000;//para ficar em segundos                    
                            System.out.println("Tempo de execucao: "+tempoExecucao+" segundos");

                            distanciaCadaExecucao[i] = resultado.getDistancia();                                        
                            System.out.println("Melhor distancia da Execucao: "+resultado.getDistancia());
                        }

                        //SOMA AS DISTANCIAS, CALCULA A MEDIA, SELECIONA A MAIOR E MENOR 
                        float maior = distanciaCadaExecucao[0];
                        float menor = distanciaCadaExecucao[0];
                        for(int i=0; i<10; i++){
                            if(maior < distanciaCadaExecucao[i]){
                                maior = distanciaCadaExecucao[i];
                            }
                            if(menor > distanciaCadaExecucao[i]){
                                menor = distanciaCadaExecucao[i];
                            }
                            distanciaMedia += distanciaCadaExecucao[i];
                        }

                        distanciaMedia = distanciaMedia/10; //CALCULA MÉDIA DAS DISTANCIAS
                        System.out.println("Combinacao "+exec+" Cruzamento: "+cruzamento+" Mutacao: "+mutacao+" Distancia media: "+distanciaMedia+" Maior distancia: "+maior+" Menor distancia: "+menor);                
                        try {
                            //ESCREVE RESULTADO EM ARQUIVO PARA GERAÇÃO DE GRAFICOS
                            //grafico 3d com taxas de cruzamento, mutacao e distancia media
                            Instancia.escreveMedia(cruzamento, mutacao, distanciaMedia);
                        } catch (IOException ex) {
                            Logger.getLogger(ExperimentoInterface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            //grafico de tolerancia para as 1.000 execucoes
                            Instancia.escreveVarianciaMedia(exec, distanciaMedia, menor, maior);
                        } catch (IOException ex) {
                            Logger.getLogger(ExperimentoInterface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                t = System.currentTimeMillis() - t; 
                t = t/1000;//para ficar em segundos
                System.out.println("Tempo de execucao do experimento: "+t+" segundos");
                jButton1.setEnabled(true);
            }
        }).start();
                
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExperimentoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExperimentoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExperimentoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExperimentoInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ExperimentoInterface().setVisible(true);
                } catch (UnsupportedEncodingException ex) {
                    Logger.getLogger(ExperimentoInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel labelTxCruzamento;
    private javax.swing.JLabel labelTxMutacao;
    private javax.swing.JLabel taxaCruzamento;
    private javax.swing.JLabel taxaMutacao;
    // End of variables declaration//GEN-END:variables
}
